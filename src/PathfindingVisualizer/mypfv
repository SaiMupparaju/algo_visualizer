import React, {Component} from 'react';
import Node from './Node/Node';
import './PathfindingVisualizer.css';
import {dijkstra} from '../algorithms/dijkstra';

const START_NODE_ROW = 10;
const START_NODE_COL = 15;
const FINISH_NODE_ROW = 10;
const FINISH_NODE_COL = 35;

export default class PathfindingVisualizer extends Component {
    constructor(props){
        super(props);
        this.state = {
             grid: [],
             };
    }

    componentDidMount() {
        const grid = this.getInitialGrid();
        this.setState({grid});
    }


    animate(visitedNodesInOrder) {
        for (let i = 0; i < visitedNodesInOrder.length; i++){
            setTimeout(() => {
                const node = visitedNodesInOrder[i];
                const newGrid = this.state.grid.slice();
                const newNode = {
                    ...node,
                    isVisited: true,
                };
                newGrid[node.row][node.col] = newNode;
                    this.setState({grid: newGrid});
            }, 100 * i);
        }
    }

    visualize() {
        const {grid} = this.state;
        const startNode = grid[START_NODE_ROW][START_NODE_COL];
        const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];
        const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);
        console.log(visitedNodesInOrder);
    }

    getInitialGrid = () => {
        const grid = [];
        for (let row = 0; row < 15; row++) {
            const currentRow = [];
            for (let col = 0; col < 50; col ++){
                currentRow.push(this.createNode(col, row));
            }
            grid.push(currentRow);
        }
    };

    createNode = (col, row) => {
        return {
            col, 
            row, 
            isStart: row === START_NODE_ROW && col === START_NODE_COL,
            isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,
            distance: Infinity,
            isVisited: false,
            isWall: false,
            previousNode: null, 
        };
    };
   
    render() {
        const {grid} = this.state;
    
        return (
          <>
            <button onClick={() => this.visualize()}>
              Visualize Dijkstra's Algorithm
            </button>
            <div className="grid">
              {grid.map((row, rowIdx) => {
                return (
                  <div key={rowIdx}>
                    {row.map((node, nodeIdx) => {
                      const {row, col, isFinish, isStart} = node;
                      return (
                        <Node
                          col={col}
                          isFinish={isFinish}
                          isStart={isStart}       
                          row={row}></Node>
                      );
                    })}
                  </div>
                );
              })}
            </div>
          </>
        );
      }
    }
